"""
Generic Lambda Function for {{ plan.intent }} Intent

This Lambda function was auto-generated by the Meta-Agent to handle the {{ plan.intent }} intent.
It processes the provided parameters and performs the requested action.

Generated for Goal: {{ plan.goal_id }}
Created at: {{ plan.created_at }}
"""

import json
import logging
import os
import datetime
from typing import Dict, Any, Optional, List, Union

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Constants
INTENT = "{{ plan.intent }}"
GOAL_ID = "{{ plan.goal_id }}"
STEP_ID = "{{ step.id }}"
ACTION_TYPE = "{{ step.action_type }}"

def lambda_handler(event, context):
    """
    AWS Lambda handler function.
    
    Args:
        event: The event dict containing input parameters
        context: The Lambda context object
        
    Returns:
        Dict containing the execution results
    """
    logger.info(f"Processing {INTENT} intent with action type {ACTION_TYPE}")
    logger.info(f"Event: {json.dumps(event)}")
    
    try:
        # Extract parameters from the event or use defaults from the plan
        params = event.get('parameters', {})
        {% for param in step.parameters %}
        {{ param.name }} = params.get('{{ param.name }}', {{ param.value|tojson }})
        {% if param.required %}
        if {{ param.name }} is None:
            raise ValueError(f"Required parameter '{{ param.name }}' is missing")
        {% endif %}
        {% endfor %}
        
        # Execute the action
        result = execute_action(
            {% for param in step.parameters %}
            {{ param.name }}={{ param.name }},
            {% endfor %}
            event=event
        )
        
        # Return the result
        return {
            'statusCode': 200,
            'body': json.dumps({
                'intent': INTENT,
                'goal_id': GOAL_ID,
                'step_id': STEP_ID,
                'action_type': ACTION_TYPE,
                'result': result,
                'success': True,
                'timestamp': datetime.datetime.utcnow().isoformat()
            }),
            'headers': {
                'Content-Type': 'application/json'
            }
        }
    except Exception as e:
        logger.error(f"Error processing {INTENT} intent: {str(e)}", exc_info=True)
        return {
            'statusCode': 500,
            'body': json.dumps({
                'intent': INTENT,
                'goal_id': GOAL_ID,
                'step_id': STEP_ID,
                'action_type': ACTION_TYPE,
                'error': str(e),
                'success': False,
                'timestamp': datetime.datetime.utcnow().isoformat()
            }),
            'headers': {
                'Content-Type': 'application/json'
            }
        }

def execute_action(
    {% for param in step.parameters %}
    {{ param.name }},
    {% endfor %}
    event: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Execute the {{ plan.intent }} action with the provided parameters.
    
    Args:
        {% for param in step.parameters %}
        {{ param.name }}: {{ param.name|capitalize }} parameter
        {% endfor %}
        event: The original Lambda event
        
    Returns:
        Dict containing the execution results
    """
    logger.info(f"Executing {INTENT} action")
    
    # This is a placeholder implementation that would be customized based on the intent
    # In a real implementation, this would contain specific logic for the intent
    
    {% if plan.intent == "create_task" %}
    # Implementation for create_task intent
    task = {
        "title": {{ parameters.get("topic", "''") }},
        "description": {{ parameters.get("description", "''") }},
        "due_date": {{ parameters.get("date", "None") }},
        "priority": {{ parameters.get("priority", "'medium'") }},
        "assignee": {{ parameters.get("person", "None") }},
        "created_at": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Created task: {task['title']}")
    return {"task": task}
    
    {% elif plan.intent == "schedule_meeting" %}
    # Implementation for schedule_meeting intent
    meeting = {
        "title": {{ parameters.get("topic", "''") }},
        "date": {{ parameters.get("date", "''") }},
        "time": {{ parameters.get("time", "''") }},
        "duration": {{ parameters.get("duration", "'60 minutes'") }},
        "attendees": {{ parameters.get("person", "[]") }},
        "description": {{ parameters.get("description", "''") }},
        "location": {{ parameters.get("location", "''") }},
        "created_at": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Scheduled meeting: {meeting['title']} on {meeting['date']} at {meeting['time']}")
    return {"meeting": meeting}
    
    {% elif plan.intent == "find_information" %}
    # Implementation for find_information intent
    search_results = {
        "query": {{ parameters.get("topic", "''") }},
        "results": [
            {"title": "Example result 1", "snippet": "This is an example search result"},
            {"title": "Example result 2", "snippet": "Another example search result"}
        ],
        "timestamp": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Found information about: {search_results['query']}")
    return {"search_results": search_results}
    
    {% elif plan.intent == "send_message" %}
    # Implementation for send_message intent
    message = {
        "recipient": {{ parameters.get("person", "''") }},
        "content": {{ parameters.get("content", "''") }},
        "subject": {{ parameters.get("subject", "''") }},
        "sent_at": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Sent message to: {message['recipient']}")
    return {"message": message}
    
    {% elif plan.intent == "update_status" %}
    # Implementation for update_status intent
    status_update = {
        "item": {{ parameters.get("topic", "''") }},
        "new_status": {{ parameters.get("status", "''") }},
        "comment": {{ parameters.get("comment", "''") }},
        "updated_at": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Updated status of {status_update['item']} to {status_update['new_status']}")
    return {"status_update": status_update}
    
    {% else %}
    # Generic implementation for {{ plan.intent }} intent
    result = {
        "intent": INTENT,
        "action_type": ACTION_TYPE,
        {% for param in step.parameters %}
        "{{ param.name }}": {{ param.name }},
        {% endfor %}
        "processed_at": datetime.datetime.utcnow().isoformat()
    }
    
    logger.info(f"Processed generic action for intent: {INTENT}")
    return {"result": result}
    {% endif %}

# Additional helper functions can be defined here
def get_current_timestamp() -> str:
    """Get the current timestamp in ISO format."""
    return datetime.datetime.utcnow().isoformat()

def format_response(data: Dict[str, Any], success: bool = True) -> Dict[str, Any]:
    """Format a standardized response."""
    return {
        "data": data,
        "success": success,
        "timestamp": get_current_timestamp()
    }
